<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poeticlife</title>
  <subtitle>大知闲闲，小知间间；大言炎炎，小言詹詹</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-10T12:18:28.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Troland</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React源码解读</title>
    <link href="http://yoursite.com/2017/03/06/react%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>http://yoursite.com/2017/03/06/react源码解读/</id>
    <published>2017-03-05T16:45:02.000Z</published>
    <updated>2017-03-10T12:18:28.000Z</updated>
    
    <content type="html">&lt;p&gt;React源码.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;React源码.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavasSript-Hoisting</title>
    <link href="http://yoursite.com/2017/02/08/javascript-hoisting/"/>
    <id>http://yoursite.com/2017/02/08/javascript-hoisting/</id>
    <published>2017-02-08T13:36:52.000Z</published>
    <updated>2017-03-10T13:17:06.000Z</updated>
    
    <content type="html">&lt;p&gt;变量声明是任何一门语言最基础的一个方面.然而，JavaScript也一点诡异，也就是被称为&lt;em&gt;声明提升&lt;/em&gt;,这会导致一个看起来无害的变量声明变成一个微妙的bug.本文将阐述什么是提升声明并且教你如何避免被其困扰。&lt;/p&gt;
&lt;p&gt;JavaScript是一门极其灵活的语言，所以可以让你随心所欲地在任何一个地方声明变量。比如，以下的自执行函数声明了三个变量并且之后用警告框来显示它们。需要注意的是，你不应该使用&lt;code&gt;alert&lt;/code&gt;警告框,但是我们在这里是试着来验证&lt;code&gt;hoisted&lt;/code&gt;而已。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var foo = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var bar = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var baz = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(foo + &amp;quot; &amp;quot; + bar + &amp;quot; &amp;quot; + baz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这看起来是平常的JavaScript代码。正如期望的那样，它显示字符串&lt;code&gt;&amp;quot;1 2 3&amp;quot;&lt;/code&gt;.现在，假设我们移动&lt;code&gt;alert&lt;/code&gt;代码的位置，就像下面这样&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var foo = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(foo + &amp;quot; &amp;quot; + bar + &amp;quot; &amp;quot; + baz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var bar = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var baz = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果有人确实写过这样的代码，有可能是不小心写错的。明显地，弹框会在变量&lt;code&gt;bar&lt;/code&gt;和&lt;code&gt;baz&lt;/code&gt;声明之前就执行。然而这是完全可用而且不会产生异常的JavaScript代码。然而&lt;code&gt;alert&lt;/code&gt;会显示&lt;code&gt;1 undefined undefined&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;基于我们之前的试验，JavaScript可以引用未声明的变量。现在，让我们执行相同的自执行函数(IIFE),但是完全移除了&lt;code&gt;baz&lt;/code&gt;变量的声明，如下所示。突然间，因为&lt;code&gt;baz&lt;/code&gt;变量未定义我们收到一个&lt;code&gt;ReferenceError&lt;/code&gt;错误.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var foo = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(foo + &amp;quot; &amp;quot; + bar + &amp;quot; &amp;quot; + baz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var bar = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个有趣的行为。为了理解这里发生了什么，你得理解提升声明。&lt;code&gt;Hoisting&lt;/code&gt;是JavaScript解析器把所有的变量和函数声明移到目前脚本作用范围的顶部的操作(这里的脚本作用范围如果是在函数内部则是函数作用范围,否则是全局范围)然而，只有实际声明的变量才会&lt;code&gt;hoisted&lt;/code&gt;.任何赋值都会留在原来的位置。因而，我们的第二段自执行的函数可以转化为以下代码:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var baz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  foo = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(foo + &amp;quot; &amp;quot; + bar + &amp;quot; &amp;quot; + baz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bar = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baz = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你明白了为什么第二个例子不会产生异常。在经过提升声明后，变量&lt;code&gt;bar&lt;/code&gt;和&lt;code&gt;baz&lt;/code&gt;实际上会在alert语句之前声明，即使是undefined值。在第三个例子中，变量&lt;code&gt;baz&lt;/code&gt;被完全移除。这样就没有变量可以用来提升声明,因此alert语句会抛出异常。&lt;/p&gt;
&lt;p&gt;另外，需要注意的是如下的代码也是会同样抛出&lt;code&gt;ReferenceError&lt;/code&gt;错误:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var foo = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(foo + &amp;quot; &amp;quot; + bar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bar = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;函数声明提升&quot;&gt;&lt;a href=&quot;#函数声明提升&quot; class=&quot;headerlink&quot; title=&quot;函数声明提升&quot;&gt;&lt;/a&gt;函数声明提升&lt;/h1&gt;&lt;p&gt;如前所述，函数声明也可以hoisted.然而,&lt;strong&gt;函数表达式不会提升声明&lt;/strong&gt;。例如,得益于函数声明提升以下代码会如期正常运行：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function foo() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(&amp;quot;Hello!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而，如下示例将肯定会失败。&lt;code&gt;foo&lt;/code&gt;变量声明会提升在调用函数之前。然而，因为&lt;code&gt;foo&lt;/code&gt;的赋值并没有提升,将会抛出一个由于试图调用一个非函数变量的异常。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var foo = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(&amp;quot;Hello!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;提升声明&lt;/em&gt;会影响变量生命周期，它包含了三个步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量声明 - 创建变量。比如&lt;code&gt;var myvar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;变量初始化 - 给变量赋值。比如&lt;code&gt;myvar = 150&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;访问变量 - 访问并且使用变量的值。比如&lt;code&gt;alert(myvar)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;提升声明&lt;/em&gt;影响的范围:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量声明: 使用&lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;或者&lt;code&gt;const&lt;/code&gt;关键字&lt;/li&gt;
&lt;li&gt;函数声明: 使用&lt;code&gt;function &amp;lt;name&amp;gt;(){...}&lt;/code&gt;语法&lt;/li&gt;
&lt;li&gt;类声明: 使用&lt;code&gt;class&lt;/code&gt;关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;函数作用域变量&quot;&gt;&lt;a href=&quot;#函数作用域变量&quot; class=&quot;headerlink&quot; title=&quot;函数作用域变量&quot;&gt;&lt;/a&gt;函数作用域变量&lt;/h1&gt;&lt;p&gt;声明的变量默认值是&lt;code&gt;undefined&lt;/code&gt;.代码如下:&lt;br&gt;&lt;a href=&quot;http://jsbin.com/xizusi/edit?js,console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;打开Jsbin&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Declare num variable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var num;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(num); // =&amp;gt; undefined  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Declare and initialize str variable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var str = &amp;apos;Hello World!&amp;apos;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(str); // =&amp;gt; &amp;apos;Hello World!&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;块作用范围-let&quot;&gt;&lt;a href=&quot;#块作用范围-let&quot; class=&quot;headerlink&quot; title=&quot;块作用范围:let&quot;&gt;&lt;/a&gt;块作用范围:let&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;let声明&lt;/a&gt;在块作用范围内声明并且初始化变量:&lt;code&gt;let myvar,myvar2 = &amp;#39;Init&amp;#39;&lt;/code&gt;。默认情况下一个声明没初始化的变量拥有&lt;code&gt;undefined&lt;/code&gt;值.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;let&lt;/em&gt;是由es6的一个极大的补充，它允许让代码模块化并且封装在块语句范围内.&lt;br&gt;&lt;a href=&quot;http://jsbin.com/jeyono/edit?js,console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;打开Jsbin&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (true) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // Declare name block variable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  let month;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(month); // =&amp;gt; undefined  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // Declare and initialize year block variable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  let year = 1994;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(year); // =&amp;gt; 1994&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// name and year or not accessible here, outside the block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(year); // ReferenceError: year is not defined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Hoisting和let&quot;&gt;&lt;a href=&quot;#Hoisting和let&quot; class=&quot;headerlink&quot; title=&quot;Hoisting和let&quot;&gt;&lt;/a&gt;Hoisting和let&lt;/h1&gt;&lt;p&gt;摘自这篇&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/issues/767#issuecomment-227946671&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From the code author’s perspective, “declaring” is the var x part and “initializing” is the x = 2 part. But from the perspective of the spec/engine, these shift. “Declaring” is like registering a variable to a scope, “initializing” is reserving space/memory/binding for that variable so it can be used (and giving it its initial undefined value), and “assigning” is giving it a value explicitly in code.&lt;/p&gt;
&lt;p&gt;Declaring always happens at time of compilation, and its effect can be seen whenever a scope is first entered. Initializing for var happens at the beginning of the scope, whereas it happens at the site of the declarator for let and const. Initialization is what gives a value its initial undefined value. Assignment then is when you actually use = to assign something to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思是说:在代码的作者看来,&lt;code&gt;声明&lt;/code&gt;就是var x部分而&lt;code&gt;初始化&lt;/code&gt;是指的x=2.但是从es6文档来看,&lt;br&gt;&lt;code&gt;声明&lt;/code&gt;是指在作用范围内注册这个变量，&lt;code&gt;初始化&lt;/code&gt;是指为变量保留空间/内存/绑定以便它可以被引用(并且赋值它初始值&lt;code&gt;undefined&lt;/code&gt;),而&lt;code&gt;赋值&lt;/code&gt;是指显式地在代码中赋值。&lt;/p&gt;
&lt;p&gt;声明永远发生在编译时，当进入作用域就只可以引用它。var变量的初始化发生在作用范围顶部，而let和const是在声明它们的地方。初始化就是赋值一个未定义的初始值。然后赋值是当你确实用&lt;code&gt;=&lt;/code&gt;来赋值。&lt;/p&gt;
&lt;p&gt;换句话也就是说，当声明&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;的时候，在它们之前只是进行了变量的注册，而未初始化，所以在&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;之前引用变量会出现&lt;strong&gt;变量引用错误&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt;会在块作用范围的顶部注册，但是当变量在声明前被访问会抛出错误：&lt;code&gt;ReferenceError: &amp;lt;variable&amp;gt; is not defined&lt;/code&gt;.从变量声明语句到块作用范围的顶部，变量是在一个临时的死区(Temporal Dead Zone, 简称TDZ)并且不能够被访问.请看以下代码:&lt;br&gt;&lt;a href=&quot;http://jsbin.com/jodegoy/edit?js,console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;打开jsbin&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function isTruthy(value) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var myVariable = &amp;apos;Value 1&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * temporal dead zone for myVariable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(myVariable);// Throws ReferenceError: myVariable is not defined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let myVariable = &amp;apos;Value 2&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // end of temporary dead zone for myVariable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(myVariable); // =&amp;gt; &amp;apos;Value 2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var m = isTruthy(1); // =&amp;gt; true &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(m)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;myVariable&lt;/code&gt;在从&lt;code&gt;let myVariable&lt;/code&gt;到块语句&lt;code&gt;if (value) {...}&lt;/code&gt;都是临时死区。如果在这个区间访问变量就会抛出一个引用的错误&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-native-error-types-used-in-this-standard-referenceerror&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReferenceError&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是这里有一个疑问就是说:是否&lt;code&gt;myVariable&lt;/code&gt;真的提升变量声明至在块声明语句中的顶,或者只是在临时死区未定义而已？&lt;/p&gt;
&lt;p&gt;一个准确的解释是：当引擎遇到一个包含了&lt;code&gt;let&lt;/code&gt;语句的块语句之中的时候，这个变量首先会在块语句顶部声明，在声明状态它仍然不能够被访问，但是它覆盖了作用范围外的同名的变量。之后当&lt;code&gt;let myvAR&lt;/code&gt;被传值后，变量在初始化状态就可以被使用了。可以查看这个&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/issues/767#issuecomment-227946671&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解释&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;常量-const&quot;&gt;&lt;a href=&quot;#常量-const&quot; class=&quot;headerlink&quot; title=&quot;常量:const&quot;&gt;&lt;/a&gt;常量:const&lt;/h1&gt;&lt;p&gt;常量&lt;code&gt;const&lt;/code&gt;会在块语句顶部被注册。由于&lt;em&gt;临时死区&lt;/em&gt;常量不能够在声明之前被访问.&lt;br&gt;&lt;code&gt;const&lt;/code&gt;提升声明和&lt;code&gt;let&lt;/code&gt;语句一致的行为&lt;br&gt;比如以下代码:&lt;br&gt;&lt;a href=&quot;http://jsbin.com/desugig/edit?js,console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;打开jsbin&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function double(number) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // temporal dead zone for TWO constant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   console.log(TWO); // ReferenceError: TWO is not defined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   const TWO = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // end of temporal dead zone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return number * TWO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double(5); // =&amp;gt; 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;类声明&quot;&gt;&lt;a href=&quot;#类声明&quot; class=&quot;headerlink&quot; title=&quot;类声明&quot;&gt;&lt;/a&gt;类声明&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_declarations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;类声明&lt;/a&gt;定义了一个包含了名字的构造函数和方法。类声明是ES6的一个很好的补充。类是建立在JavaScript原型继承之上的并且拥有一些其它的优点比如&lt;code&gt;super&lt;/code&gt;(用来访问父类），&lt;code&gt;static&lt;/code&gt;（用来定义静态方法）,&lt;code&gt;extends&lt;/code&gt;(定义子类)还有其它。&lt;br&gt;一个类声明如下:&lt;br&gt;&lt;a href=&quot;http://jsbin.com/doqelut/edit?js,console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;打开jsbin&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Point &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   constructor(x, y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     this.x = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     this.y = y;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   move(dX, dY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     this.x += dX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     this.y += dY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Create an instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var origin = new Point(0, 0);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Call a method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin.move(50, 100);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在类声明之前访问类就会引发错误，JavaScript会抛出&lt;code&gt;ReferenceError: &amp;lt;name&amp;gt; is not defined&lt;/code&gt;的错误。&lt;br&gt;如下代码:&lt;br&gt;&lt;a href=&quot;http://jsbin.com/budopew/edit?js,console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;打开jsbin&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Use the Company class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Throws ReferenceError: Company is not defined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var apple = new Company(&amp;apos;Apple&amp;apos;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Class declaration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Company &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Use correctly the Company class after declaration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var microsoft = new Company(&amp;apos;Microsoft&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以用类表达式的方式来创建类。&lt;br&gt;代码如下:&lt;br&gt;&lt;a href=&quot;http://jsbin.com/vumomeq/edit?js,console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;打开jsbin&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Use the Sqaure class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(typeof Square);   // =&amp;gt; &amp;apos;undefined&amp;apos;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Throws TypeError: Square is not a constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var mySquare = new Square(10);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Class declaration using variable statement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var Square = class &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(sideLength) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.sideLength = sideLength;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getArea() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return Math.pow(this.sideLength, 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Use correctly the Square class after declaration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var otherSquare = new Square(5);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为&lt;code&gt;Square&lt;/code&gt;类声明提升到作用域的顶端，在类声明行之前都是&lt;code&gt;undefined&lt;/code&gt;的值，所以当在类声明之前用&lt;code&gt;var mySquare = new Square(10)&lt;/code&gt;会导致JavaScript抛出错误&lt;code&gt;TypeError: Square is not a constructor&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Hoisting&lt;/code&gt;很容易理解，但是是经常忽视了JavaScript语言的细微差别。没有清晰地理解提升声明，你的程序将会容易受微妙bug的影响.为了帮助解决这个问题，很多开发者（和linting语法校验工具）主张在每个脚本作用范围的顶端单独写变量声明的语句。因为本质上这是JavaScript解析器如何解析你的代码，这条规则是有效的-即使我会因为打破这条规则而内疚。&lt;br&gt;有一个地方就是关于函数的提升声明，如果当程序员想要在源文件的顶部知道函数是如何调用的而不用滚动到函数声明的地方去查看函数的详细实现细节，例如&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#bindable-members-up-top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;看这里&lt;/a&gt;来查看这种技术是如何增加了&lt;em&gt;Angular&lt;/em&gt;控制器的可读成性的.&lt;/p&gt;
&lt;p&gt;以上文字译自&lt;a href=&quot;https://www.sitepoint.com/back-to-basics-javascript-hoisting/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Back to Basics: JavaScript Hoisting&lt;/a&gt;和&lt;a href=&quot;https://rainsoft.io/javascript-hoisting-in-details/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javascript-hoisting-in-details&lt;/a&gt;,文字方面有进行过相关的缩略。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;变量声明是任何一门语言最基础的一个方面.然而，JavaScript也一点诡异，也就是被称为&lt;em&gt;声明提升&lt;/em&gt;,这会导致一个看起来无害的变量声明变成一个微妙的bug.本文将阐述什么是提升声明并且教你如何避免被其困扰。&lt;/p&gt;
&lt;p&gt;JavaScript是一门极其灵活的
    
    </summary>
    
      <category term="Tech" scheme="http://yoursite.com/categories/Tech/"/>
    
    
      <category term="FrontEnd" scheme="http://yoursite.com/tags/FrontEnd/"/>
    
      <category term="Hoisting" scheme="http://yoursite.com/tags/Hoisting/"/>
    
  </entry>
  
  <entry>
    <title>lib-flexible源码解读</title>
    <link href="http://yoursite.com/2016/12/30/lib-flexible%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>http://yoursite.com/2016/12/30/lib-flexible源码解读/</id>
    <published>2016-12-30T00:52:07.000Z</published>
    <updated>2016-12-30T00:54:10.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="源码阅读" scheme="http://yoursite.com/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Gulp work flow</title>
    <link href="http://yoursite.com/2016/12/05/Gulp-work-flow/"/>
    <id>http://yoursite.com/2016/12/05/Gulp-work-flow/</id>
    <published>2016-12-05T01:18:08.000Z</published>
    <updated>2016-12-08T07:27:47.000Z</updated>
    
    <content type="html">&lt;p&gt;关于前端自动化的文章已经有很多，最近，我一直在做这个前端的工程化，说简单一点就是把现有的插件进行整合，从而形成自己的工具集，偶也只是站在巨人的肩膀上^-^.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于前端自动化的文章已经有很多，最近，我一直在做这个前端的工程化，说简单一点就是把现有的插件进行整合，从而形成自己的工具集，偶也只是站在巨人的肩膀上^-^.&lt;/p&gt;

    
    </summary>
    
      <category term="Tech" scheme="http://yoursite.com/categories/Tech/"/>
    
    
      <category term="FrontEnd" scheme="http://yoursite.com/tags/FrontEnd/"/>
    
      <category term="automate" scheme="http://yoursite.com/tags/automate/"/>
    
  </entry>
  
  <entry>
    <title>一些Javascript的习题</title>
    <link href="http://yoursite.com/2016/10/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Javascript/"/>
    <id>http://yoursite.com/2016/10/16/深入理解Javascript/</id>
    <published>2016-10-16T12:48:29.000Z</published>
    <updated>2016-10-17T05:50:27.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;&lt;p&gt;孔子日:学而实习之，不亦乐乎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在学习前端的道路上有很多的细节，也就是经验是值得去研究的，这不今天就研究了一把对象.且看以下题目：&lt;br&gt;    &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var president = &amp;#123;name: &amp;apos;bush&amp;apos;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function setName(obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	obj.name = &amp;apos;obama&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	obj = &amp;#123;name: &amp;apos;clinton&amp;apos;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setName(president);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;请问以上president将为何值?一开始我会想当然地觉得应该输出&lt;code&gt;{name: clinton&amp;#39;}&lt;/code&gt;,不过其实是错的，应该是为&lt;code&gt;{name: &amp;#39;obama&amp;#39;}&lt;/code&gt;.那么为什么会这样呢？&lt;br&gt;因为对象的创建其实只是创建了一个内存地址来存放里面的内容，也就是说只是创建了一个函数指针。带着这个思考的方法，我又在函数&lt;code&gt;setName&lt;/code&gt;里面打印出新创建的对象:&lt;br&gt;    &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var president = &amp;#123;name: &amp;apos;bush&amp;apos;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function setName(obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	obj.name = &amp;apos;obama&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	obj = &amp;#123;name: &amp;apos;clinton&amp;apos;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var newPresident = setName(president);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(president, newPresident);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回值是&lt;code&gt;{name: &amp;#39;clinton&amp;#39;}, {name: &amp;#39;obama&amp;#39;}, {name: &amp;#39;clinton&amp;#39;}&lt;/code&gt;&lt;br&gt;结果，输出如预期，在函数setName里面&lt;code&gt;obj = {name: &amp;#39;clinton&amp;#39;}&lt;/code&gt;实际上是创建了一个新的指针来存放新的内容，所以你得返回obj才会看到新建立的对象.&lt;br&gt;&lt;strong&gt;以上是自己的思路，欢迎童鞋指正.&lt;/strong&gt;&lt;br&gt;今天先到这，未完待续……&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;孔子日:学而实习之，不亦乐乎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在学习前端的道路上有很多的细节，也就是经验是值得去研究的，这不今天就研究了一把对象.且看以下题目：&lt;br&gt;    &lt;figure class=&quot;highlight plain&quot;
    
    </summary>
    
      <category term="Tech" scheme="http://yoursite.com/categories/Tech/"/>
    
    
      <category term="FrontEnd" scheme="http://yoursite.com/tags/FrontEnd/"/>
    
  </entry>
  
  <entry>
    <title>紧凑的生活</title>
    <link href="http://yoursite.com/2016/04/13/%E7%B4%A7%E5%87%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    <id>http://yoursite.com/2016/04/13/紧凑的生活/</id>
    <published>2016-04-13T14:28:15.000Z</published>
    <updated>2016-04-14T08:39:58.000Z</updated>
    
    <content type="html">&lt;p&gt;最近，我从上海辞职回老家了，在上海工作期间，最近的这家公司，我基本上早上5点半起床，上个厕所，烧开水，上完厕所喝开水，然后开始做瑜珈，吃苹果和面包，大约6点半出门，7点半左右到公司后再到小卖部喝了点稀饭。&lt;/p&gt;
&lt;p&gt;因为是8点半上班的所以，喝完稀饭后，我会看些自己感兴趣的事情，比如我会看些养生方面的文章，IT技术类的网站比如&lt;a href=&quot;https://cnodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cnodejs&lt;/a&gt;, &lt;a href=&quot;http://fex.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度前端&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;接下来就是开始紧张的工作了。&lt;/p&gt;
&lt;p&gt;晚上回家，大多数时间我都会看会电影。或者看些文章，去跑跑步。&lt;/p&gt;
&lt;p&gt;看起来，我生活得很健康，很紧凑，可是我却感觉到了前所未有的空虚，为什么呢？我问自己，我迷失了自我。没有目标的生活让自己陷于一种光鲜的消沉之路。&lt;/p&gt;
&lt;p&gt;我的家在一座小岛上面，靠捕渔为生，在家的几天，每天母亲都会把美味的饭菜准备好来，因为我身体进行了专门的调理，我比以前要能吃了，不像以前吃了会吐。望着父母满头的白发，这么大年纪了还在努力赚钱为了给我娶媳妇。我心里很内疚。我感觉到了家的温暖，最近这几天，脑海中总是有个声音在告诫我，必须过上紧凑的生活，有目标的生活。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生活不止眼前的苟且还有诗和远方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我应该去探索，应该让自己更加紧凑地生活，目标是让父母不用再为我操劳了。因为我有看过中医方面的理论，所以我觉得5点起床是可以的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5点起床,烧开水，上厕所，完后喝水。&lt;/li&gt;
&lt;li&gt;5点半开始yoga，如果假期瑜珈后就跑步&lt;/li&gt;
&lt;li&gt;6点开始吃早餐&lt;/li&gt;
&lt;li&gt;6:15 看新闻&lt;/li&gt;
&lt;li&gt;6点半开始写东西&lt;/li&gt;
&lt;li&gt;如果在假期就在下午打篮球&lt;/li&gt;
&lt;li&gt;晚上看书做项目，如非假期就跑步&lt;/li&gt;
&lt;li&gt;10点半入睡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先坚持一段时间再说吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近，我从上海辞职回老家了，在上海工作期间，最近的这家公司，我基本上早上5点半起床，上个厕所，烧开水，上完厕所喝开水，然后开始做瑜珈，吃苹果和面包，大约6点半出门，7点半左右到公司后再到小卖部喝了点稀饭。&lt;/p&gt;
&lt;p&gt;因为是8点半上班的所以，喝完稀饭后，我会看些自己感兴趣
    
    </summary>
    
      <category term="Essays" scheme="http://yoursite.com/categories/Essays/"/>
    
    
      <category term="愉快生活" scheme="http://yoursite.com/tags/%E6%84%89%E5%BF%AB%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
